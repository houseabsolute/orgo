// Code generated for package templatebin by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../templates/rs.tpl
// ../../templates/schema.tpl
package templatebin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesRsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x6e\xe2\x38\x14\xbe\xb6\x9f\xe2\xa8\xda\x95\xa0\xa2\x79\x80\x48\xbd\xaa\xa2\x2c\x52\x94\x0e\x4d\xa4\xbd\x18\x8d\x56\x59\x6a\x68\x34\xe0\x04\xdb\x74\x3a\xca\xfa\xdd\x57\xc7\x09\xe4\x87\xd0\x24\x4c\x0b\xcc\x15\x60\x9f\x9f\xef\xf8\x7c\xf9\x8e\x49\x1a\xcd\xbf\x47\x4b\x06\x59\x06\x96\x9b\x7c\xf9\xbe\x0c\x5e\x12\xa1\xfc\x68\xcd\x40\x6b\x4a\xe3\x75\x9a\x08\x05\x23\x0a\x00\x90\x65\x77\x20\x22\xbe\x64\x60\x4d\xcd\xba\x44\x9b\x7c\x07\x2c\xf8\x0f\x52\x11\x73\xb5\x80\x9b\x3f\x37\x37\xe5\xce\x1d\x30\xfe\x8c\x3f\xc7\x94\xbe\x46\x02\x14\xdc\x1b\xfb\x30\x79\x48\x9e\xf3\x2c\x68\xf4\x87\x90\x60\xdf\x23\x08\x93\xbc\x12\x4c\x3e\x05\x26\x9c\xfa\x99\x1a\x9c\x68\xa9\x35\x48\x25\xb6\x73\x05\x19\x25\x72\xfe\xc2\xd6\x11\xb9\x0d\xcc\x27\x25\x42\x12\x72\xfb\x6f\x24\x99\xf5\x14\x50\x4d\xe9\x62\xcb\xe7\xe0\xb3\x1f\xa3\x31\xdc\x96\xfe\x19\x25\x82\xa9\xad\xe0\x65\xcc\x8c\x92\x22\x98\x0d\x72\x42\x09\x11\xd2\x26\xc4\x44\xf2\xd9\x8f\xa7\x60\xa4\xc6\x13\x4a\x34\x35\x90\x77\x47\xf1\x90\xac\xb6\x6b\x2e\xab\x08\xad\x2f\x22\x7e\x8d\x14\x2b\x6a\xd1\xfa\xef\x17\x26\xd8\x5f\x6c\x95\x32\x21\x2b\xc0\xb1\xee\x78\x01\x56\x30\xf3\xc2\x9f\x29\xb3\x1e\x22\xee\xcc\x30\x10\x71\x66\x80\xa8\x47\x26\xda\x6e\xdb\x4d\xf0\x03\xb1\x8f\x81\xbd\xa5\x96\xf3\x96\x0a\x26\x65\x9c\x70\x4a\x7c\x67\xa0\xc3\x94\x17\x0e\x5f\xbf\xf5\xce\x91\xa8\x13\xbc\xda\xaa\x0c\x94\x88\xf9\xb2\xa8\x34\x50\x22\x0f\x2a\xcd\x6a\x5b\x6d\x9d\x26\x53\xbe\x37\xf9\xfa\xed\x68\x1c\xc4\xdf\xc3\x8e\x54\x48\x7b\xf0\xbd\x51\x89\x17\xba\xa1\xd9\xf3\xc2\x81\x0d\x70\x87\x3a\x78\xe1\xd0\x1e\xbb\x83\x3d\x3a\x9a\xe5\x85\x9d\x9d\x70\xbb\x4d\xbc\xb0\xbb\xa1\x6e\x0f\x9b\x21\x7d\x9a\x4a\x7f\xbb\x5a\x99\xdd\xe2\xab\x09\xdd\xc2\x24\xe9\x27\xea\x3d\x83\x4a\xa2\x5c\x07\xf0\xc7\xdd\xee\xe9\x6f\x7f\xd2\x2b\xca\x59\x91\x0b\x92\x65\x85\xdc\xa1\x1c\x65\x75\xd5\xa8\x8b\x06\xad\x67\x45\x1d\x35\xdb\x70\x5f\xcb\xd8\x9a\x09\xb1\x19\x85\xdd\x70\x54\x23\x14\xd9\xa6\xc4\xe6\x7a\x6d\x8c\x52\x11\xbf\xa6\x2b\x63\x55\x57\xb1\xaa\x22\xcb\x9b\x02\xff\x5e\xaf\xb5\xb6\x3b\x4a\xc8\xda\xd9\xe5\xcc\x0c\x40\xd2\x45\x3d\xe2\xcc\xec\x0a\x99\x9b\x0a\xdb\x93\xe1\xa8\xba\x64\xa7\xfb\x9b\x64\xb3\xb5\x9c\xb7\xcc\x0c\x80\xfc\x70\xb4\x9e\xb4\x86\xb7\x72\x24\xa3\x31\x22\xd1\x38\x1a\x7c\xe7\x4c\x70\x96\xb8\xfc\x98\x66\xc6\xd5\x67\x9b\xc7\xd4\x7e\x1f\x22\x68\xd8\xa3\x9c\xf2\x0a\xca\x5d\x6f\xb5\xee\x2d\xdf\x39\x40\xa4\x5b\xcc\x61\xa7\x98\xb8\xb4\x48\x04\xfc\x33\x81\x18\x89\x92\xf3\xad\x9e\xc0\xf8\x91\x98\xc3\x3d\x44\x69\xca\xf8\xf3\x28\xe6\x13\x88\x4b\x90\x63\x34\xd0\x5d\xe5\xdb\x98\xb7\x3c\x73\x14\xf0\xdf\xbd\xa0\x4d\xad\x9f\x58\x11\x76\x14\xcb\x2c\x0b\x35\x43\xf1\x5d\x7e\xb5\x6b\xe2\x31\x3e\xe5\xe9\xf3\x67\xb4\x25\x58\x85\xd4\xfd\xf2\x7e\x2a\x91\xeb\xfc\xad\x03\xaa\x75\xfc\x64\x2c\x76\x23\x54\x9d\x60\x9f\x93\xb1\xbd\xed\x0d\x1c\x25\x92\x7c\xcc\xac\x24\x3b\x14\xbf\xa6\xc8\xe2\x52\x9d\xf8\x27\x0b\xdf\x41\xe8\x56\xb9\xeb\x06\xf0\xb1\x5a\x77\x88\xea\xa3\x05\xee\x74\xb2\x7c\x7e\xf6\x93\x88\x53\x5c\x49\xea\x57\xa4\xa3\xf7\xd7\x7e\x03\xd8\x0b\x2f\x31\xf1\x3c\x35\x68\xe0\xb9\x17\x01\xe9\x0e\x03\xe9\x85\x17\xb9\x3c\x78\x8a\x0d\x3c\xcb\x8b\xc0\x74\x07\xc2\x34\x7f\x4a\xce\x32\xb4\x8e\x73\xb1\x7e\x6c\xe7\xc2\x73\x9c\x76\x0d\xb6\x9d\xef\x80\x8e\xb6\xae\x41\xac\xf3\x1d\x51\x2f\x44\xf8\x57\xa6\x9c\xb6\xd7\xa6\x74\xd7\x2c\x70\xd7\xad\x6b\xd7\x2d\x67\xbf\x30\xb7\x2b\xef\x33\x8a\x17\x1a\x76\xf5\x85\x05\x1b\x84\x97\xc7\xab\xca\x8d\xea\x57\xa3\x35\x2e\x71\x8f\x69\x91\x60\x9f\xa2\x5a\x9b\x9e\xd4\x5f\x6d\xfc\x1f\x00\x00\xff\xff\x25\x3c\xd2\xd9\x90\x16\x00\x00")

func TemplatesRsTplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesRsTpl,
		"../../templates/rs.tpl",
	)
}

func TemplatesRsTpl() (*asset, error) {
	bytes, err := TemplatesRsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../templates/rs.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesSchemaTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x6a\xc3\x30\x14\x44\xf7\xff\x14\x43\x68\xc1\x36\x44\x07\x28\x74\x1d\xba\x09\x25\xee\x05\x14\xe5\xc7\x31\x89\x65\x47\xfa\xa6\x14\x55\x77\x2f\xfa\x0e\x4d\x68\x77\xd2\xcc\x13\x33\x9a\xc9\xba\xb3\xed\x18\x29\xc1\x6c\xc6\xf7\x73\x87\x9c\x89\xfa\x61\x1a\x83\xa0\x22\x00\x48\x69\x8d\x60\x7d\xc7\x30\x6f\xaa\xc7\xc2\x2c\x0e\x0c\xbe\x31\x85\xde\xcb\x11\xab\xe7\xeb\xea\xee\xac\xc1\xfe\x50\xae\x35\x91\x7c\x4d\x8c\xd6\x9d\x78\xb0\x88\x12\x66\x27\x48\x8a\x1d\x7a\x7b\x61\x27\x45\xec\x7d\xa7\x52\xb3\xb7\x91\xcd\x02\x53\x26\x7a\x48\xff\xb0\xfb\x0b\x6b\x78\x11\x9f\xae\xde\x0e\x8c\x97\x57\x98\x6d\x39\xfc\xeb\xa1\x50\x88\x4a\x6c\xc6\xbf\x4c\xdc\xb5\x4a\xd1\x71\xf6\x0e\x55\x44\xb3\x64\xd6\xe5\x57\xe5\x59\xce\x55\x8d\xe6\x71\x17\xf3\xeb\xdc\xea\x07\x96\x39\xf8\xfb\x76\xed\x69\x0c\xa2\x41\x39\x9b\x2d\x7f\xee\xda\x2a\xd6\xb4\x34\xb9\xad\xf1\x13\x00\x00\xff\xff\x8f\x6e\x6c\x06\x70\x01\x00\x00")

func TemplatesSchemaTplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesSchemaTpl,
		"../../templates/schema.tpl",
	)
}

func TemplatesSchemaTpl() (*asset, error) {
	bytes, err := TemplatesSchemaTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../templates/schema.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../templates/rs.tpl":     TemplatesRsTpl,
	"../../templates/schema.tpl": TemplatesSchemaTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"rs.tpl":     &bintree{TemplatesRsTpl, map[string]*bintree{}},
				"schema.tpl": &bintree{TemplatesSchemaTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
