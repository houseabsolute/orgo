// Code generated for package templatebin by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../templates/rs.tpl
// ../../templates/schema.tpl
package templatebin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TemplatesRsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5d\x6f\xa3\x38\x14\x7d\xb6\x7f\x85\x15\xed\x4a\x49\x95\x92\xe7\x45\xea\x53\x15\xb1\x95\x10\x9d\x14\xa4\x7d\x18\x8d\x56\x34\x75\x09\x2a\xb1\x1d\xdb\x74\x3a\x62\xfd\xdf\x57\xd7\x90\x06\x28\x29\x21\x33\x4d\x33\x4f\x49\xf0\xfd\x38\xd7\xf7\x70\xae\x63\x11\x2f\x9f\xe2\x84\x92\xa2\x20\x8e\xc7\xbf\x3c\x25\xe1\x8a\x4b\x1d\xc4\x6b\x4a\x8c\xc1\x38\x5d\x0b\x2e\x35\x19\x63\x34\x4a\x52\xbd\xca\xef\x9d\x25\x5f\xcf\x56\x3c\x57\x34\xbe\x57\x3c\xcb\x35\x9d\x71\x99\xf0\x99\x78\x4a\x66\xf7\xb1\xa2\xa3\xa6\xe5\x03\xcf\x93\xcb\x75\x2c\x75\xca\x66\x09\xdf\xe4\xb3\xe7\xbf\x66\xf4\x45\x8c\xf0\x04\xe3\xe7\x58\x12\x4d\xae\x6c\xea\x88\x5f\xf3\x87\x32\x65\x51\x5c\x92\x3f\xa4\x22\xee\x15\x20\xb2\x48\xfe\x23\x42\xa6\x4c\x3f\x92\xd1\x9f\xea\x2e\x1c\x81\x99\xfe\x21\x2c\x68\xb0\x34\x86\x28\x2d\xf3\xa5\x26\x05\x46\x6a\xb9\xa2\xeb\x18\x5d\x84\xf6\x13\x23\xa9\x10\xba\x00\x64\xce\x5d\x88\x0d\xc6\x8f\x39\x5b\x92\x80\x7e\x1f\x4f\xc8\xc5\xce\xbf\xc0\x48\x52\x9d\x4b\xb6\x8b\x59\x60\x54\x05\x73\x89\x9a\x62\x84\xa4\x72\x11\xb2\x91\x02\xfa\xfd\x2e\x1c\xeb\xc9\x14\x23\x83\x2d\x64\x22\x63\x96\x50\xe2\x5c\xf3\x2c\x5f\x33\x55\x47\xe8\x7c\x91\xe9\x73\xac\x69\x55\x8b\x31\xff\xac\xa8\xa4\x7f\xd3\x4c\x50\xa9\x6a\xc0\xa1\xee\xf4\x91\x38\xe1\xc2\x8f\x7e\x08\xea\x5c\xc7\x6c\xbe\x80\x40\x68\xbe\x20\x80\x7a\x6c\xa3\x6d\x97\x3d\x0e\x1f\x80\x7d\x42\xe8\x8b\x70\xe6\x2f\x42\x52\xa5\x52\xce\x30\x0a\xe6\x03\x1d\x6e\x58\xe5\xf0\xf5\xdb\xc1\x39\xb8\x3e\xc2\xab\xab\xca\x50\xcb\x94\x25\x55\xa5\xa1\x96\x65\x50\x65\x9f\x76\xd5\xd6\x6b\x72\xc3\x5e\x4d\xbe\x7e\xdb\x1b\x07\xf0\x1f\x60\x67\x11\x53\xf6\x60\xf1\xb5\xbf\xb7\x2a\xf1\x23\x2f\xb2\x6b\x7e\x34\xb0\x01\xde\x50\x07\x3f\x1a\xda\x63\x6f\xb0\x47\x4f\xb3\xfc\xa8\xb7\x13\x5e\xbf\x89\x1f\xf5\x37\xd4\x3b\xc0\x66\x48\x9f\x6e\x54\x90\x67\x99\x5d\xad\xbe\xda\xd0\x1d\x4c\x52\x01\xd7\xef\x19\xd4\x12\x95\x3a\x00\x3f\x2e\xb7\x6f\x7f\xf7\x9b\x0e\x3e\x6f\xe5\x02\x15\x45\x25\x77\x20\x47\x45\x53\x35\x9a\xa2\x81\x9b\x59\x41\x47\xed\x32\xb9\x6a\x64\xec\xcc\x04\xd8\xac\xc2\x6e\x18\xa8\x11\x88\x6c\x5b\x62\x37\x56\x60\xad\x91\x90\xe9\xb3\xc8\xac\x55\x53\xc5\xea\x8a\xac\x46\x15\xfe\x57\xbd\x36\xc6\xed\x29\xa1\xe8\x66\xd7\x7c\x61\x01\xa2\x3e\xea\xa1\xf9\xc2\xad\x91\xb9\xad\xb0\x07\x32\x1c\x54\x17\x6d\x75\x7f\xc3\x37\xb9\x33\x7f\x29\xec\x00\x28\x37\xc7\x98\x69\x67\x78\xa7\x44\x32\x9e\x00\x12\x03\xa3\x21\x98\x9f\x08\x0e\xcc\x50\xe7\x56\x14\xd6\x35\xa0\x9b\x5b\xe1\xbe\x0f\x91\x18\xf2\x8a\xf2\x86\xd5\x50\x6e\x7b\x3b\x10\x1e\x90\x2d\x65\x64\xab\x97\xf0\xe8\x91\x4b\xf2\xef\x94\xa4\x40\x93\x92\x6d\xad\xf0\x60\x84\x52\x46\xae\x48\x2c\x04\x65\x0f\xe3\x94\x4d\x49\xba\x83\x38\x01\x03\xd3\x57\xbc\x0b\x79\x77\x3b\x0e\xf2\xfd\x7b\x97\xb3\x69\xf4\x12\xea\x81\x6e\x42\x91\xbb\x32\xed\x40\x7c\x97\x5b\xdd\x7a\xb8\x8f\x4b\x65\xfa\xf2\xfd\xec\x08\x56\x23\xf4\x61\x79\x3f\x94\xc4\x4d\xee\x36\x01\xd5\x1a\x72\x34\x12\xb7\x15\xa8\x49\xae\x8f\xc8\xd7\xdd\xf2\x16\x8a\x1d\x8e\x72\xbc\x64\x8a\xbe\x15\xbd\xb6\xb8\xc2\xa3\x26\xe9\x8f\x16\xbc\x37\xa1\x3b\x65\xae\x1f\xc0\xaf\xd5\xb8\xb7\xa8\x7e\xad\xb0\x1d\x4f\x94\x8f\xce\x7d\x14\x69\xaa\x63\x48\xf3\x58\xb4\xf7\xcc\x7a\xd8\xd0\xf5\xa3\xcf\x98\x72\xbe\x1e\x34\xe4\xbc\x4f\x01\xe9\x0d\x03\xe9\x47\x9f\x72\x60\xf0\x35\x1d\xb8\x97\x9f\x02\xd3\x1b\x08\xd3\xfe\x11\x39\xc9\xb0\xda\xcf\xc5\xe6\xb6\x9d\x0a\xcf\x7e\xda\xb5\xd8\x76\xba\x0d\xda\xdb\xba\x16\xb1\x4e\xb7\x45\x07\x21\x82\xbf\x2f\xbb\x49\x7b\x6e\x4a\x77\xce\x02\x77\xde\xba\x76\xde\x72\xf6\x13\x73\xbb\x76\x87\x51\x5d\x62\xb8\xf5\x4b\x0a\x3a\x08\x2f\x4b\xb3\xda\x69\xea\x67\xa3\xb5\x0e\x70\xb7\xa2\x4a\xf0\x9a\xa2\x5e\x9b\x99\x36\xaf\x33\xfe\x0f\x00\x00\xff\xff\x0f\x2b\xd6\x9d\x91\x16\x00\x00")

func TemplatesRsTplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesRsTpl,
		"../../templates/rs.tpl",
	)
}

func TemplatesRsTpl() (*asset, error) {
	bytes, err := TemplatesRsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../templates/rs.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplatesSchemaTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\xc1\x7c\x1f\xd8\x86\xc8\xf7\x42\xcf\xb9\x85\x12\xf7\x05\x64\x65\x23\x1b\xdb\x92\xa3\x3f\x94\xa2\xea\xdd\x8b\xe4\xb4\x81\xb6\x37\xef\xec\xcf\x33\xb3\xda\x84\x9c\x85\x22\xc4\x08\x7e\x34\x2f\xb3\x42\x4a\x8c\x4d\xeb\x66\xac\x47\xcd\x00\xa0\x52\x93\x1f\xc3\xc0\xa5\x59\xbb\xd1\x04\x47\x62\x70\x66\x09\x9e\xba\x6d\x56\xdd\x20\x1c\x55\x85\x8b\xf1\x00\x2b\xb4\x22\xf0\x57\x31\x2c\xe4\xb2\xd5\xbe\xf8\xf2\xfe\xc0\x66\x27\xed\xaf\xa8\xfe\xdf\xaa\xc7\xfa\x00\xd2\x97\x3c\x36\x8c\xf9\xf7\x8d\xd0\xcb\x91\x56\x01\xe7\x6d\x90\x1e\xb1\x60\x97\x49\x2c\x24\x7d\x16\x27\xad\x8a\xd4\xe6\x70\xbe\xc3\x2c\x31\xf6\x67\x83\x2c\xfe\xbb\x69\xb1\x12\x9e\x9e\xc1\x4f\xf9\xe3\x57\x8f\x02\x59\x57\x88\xa3\xf9\xc9\xb8\x73\x5f\x28\x76\x0d\x5a\xa2\x76\x68\xf7\xcc\x26\x9f\x96\x7f\x4b\xa9\x6e\xd0\x7e\x0f\xf7\xc6\x96\x7c\xb0\xfa\x71\x7e\x3f\x1a\xeb\x8b\x77\x4a\xfc\x44\x6f\xe7\xbe\x76\x0d\xdb\xc3\xef\x0f\xf0\x19\x00\x00\xff\xff\x0d\x25\xce\xca\x8f\x01\x00\x00")

func TemplatesSchemaTplBytes() ([]byte, error) {
	return bindataRead(
		_TemplatesSchemaTpl,
		"../../templates/schema.tpl",
	)
}

func TemplatesSchemaTpl() (*asset, error) {
	bytes, err := TemplatesSchemaTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../templates/schema.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../templates/rs.tpl":     TemplatesRsTpl,
	"../../templates/schema.tpl": TemplatesSchemaTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"rs.tpl":     &bintree{TemplatesRsTpl, map[string]*bintree{}},
				"schema.tpl": &bintree{TemplatesSchemaTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
